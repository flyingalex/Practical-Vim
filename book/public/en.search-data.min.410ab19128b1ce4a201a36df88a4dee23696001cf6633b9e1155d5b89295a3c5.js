'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/tip1/','title':"1.Meet the Dot Command",'section':"Docs",'content':"1.Meet the Dot Command #  . means repeat the last change.When you do delete,move,or replace, if you want to do the last operation again, you can just press ..You also can use it to repeat the operation like this:\n  Press the i become the INSERT MODE, do some modification.\n  Switch the MODE to NORMAL MODE, all the operations between the two modes can use . to repeat.\n  Pretty Awesome, isn\u0026rsquo;t it?\n"});index.add({'id':1,'href':'/docs/tip2/','title':"2.Don't Repeat Yourself",'section':"Docs",'content':"2.Don\u0026rsquo;t Repeat Yourself #  Some keys can do many things:\n1.Don\u0026rsquo;t use c$\n C, Delete from the cursor position to the end of the line.\n 2.Don\u0026rsquo;t use cl\n s, Delete [count] characters [into register x] and start insert (s stands for Substitute).\n 3.Don\u0026rsquo;t use ^s\n S, Delete [count] lines [into register x] and start insert.\n 4.Don\u0026rsquo;t use ^i\n I, Insert text before the first non-blank in the line [count] times.\n 5.Don\u0026rsquo;t use $a\n A, Append text at the end of the line [count] times.\n 6.Don\u0026rsquo;t use A\u0026lt;Enter\u0026gt;\n o, Begin a new line below the cursor and insert text, repeat [count] times.\n 7.Don\u0026rsquo;t use ko\n O, Begin a new line above the cursor and insert text, repeat [count] times.\n "});index.add({'id':2,'href':'/docs/tip3/','title':"3.Take One Step Back, Then Three Forward",'section':"Docs",'content':"3.Take One Step Back, Then Three Forward #  If you want to add space around a operator in several places,you can just do all things only one time, after that, use ; to move and . to repeat the change which was done in the first time.\n"});index.add({'id':3,'href':'/docs/tip4/','title':"4.Act, Repear, Reverse",'section':"Docs",'content':"4.Act, Repear, Reverse #  Edition means change and move all the time.If we can just do them one time,and then repeat them,it will be very effective.But sometimes we also will make a mistake when we repeat them, so undo a operation is very important.Vim provide some operations for this.\n   Purpose Operation Repeatation Reverse     Make a change {edit} . u   Scan line for next character f{char} / t{char} ; ,   Scan line for previous character F{char} / T{char} ; ,   Scan document for next match /pattern \u0026lt;CR\u0026gt; n N   Scan document for previous match ?pattern \u0026lt;CR\u0026gt; n N   Perform substitution :s/target/replacement \u0026amp; u   Execute a sequence of changes qx{changes}q @x u    "});index.add({'id':4,'href':'/docs/tip5/','title':"5.Find and Replace by hand",'section':"Docs",'content':"5.Find and Replace by hand #  If you want to replace some in all the matched words.You can press * above the word which you want to replace, it will help you to find all the words in the current file, then you can replace it, then you can press n go to next word, if some matched words you don\u0026rsquo;t want to change, just press n.Remember use . after you first change.\n"});index.add({'id':5,'href':'/docs/tip6/','title':"6.Meet the Dot Formula",'section':"Docs",'content':"6.Meet the Dot Formula #  Use one key to move and one key to operation.\n"});index.add({'id':6,'href':'/docs/tip7/','title':"7. Pause with Your Brush Off the Page",'section':"Docs",'content':"7. Pause with Your Brush Off the Page #  One Line: Use vin like a painter, take more time to think how to code.\n"});index.add({'id':7,'href':'/docs/tip8/','title':"8.Chunk Your Undos",'section':"Docs",'content':"8.Chunk Your Undos #  When you use u to undo something, it will undo the last change.So if you stop to write when you finish one sentence,it will make you undo the change easy and elegant.Just try to write undoable chunk.\n"});index.add({'id':8,'href':'/docs/tip9/','title':"9.Compose Repeatable Changes",'section':"Docs",'content':"9.Compose Repeatable Changes #   Compose your changes in such a way that they can be repeated with the dot command.\n Why?Because you can use dot to repeat your change.The examples in the book, there are 3 options to delete a word(dbx, bdw, daw),only the last one is repeatable by dot command.You need to create more command like the last one, which will make your edition effective.\n"});index.add({'id':9,'href':'/docs/tip10/','title':"10. Use Counts to Do Simple Arithmetic",'section':"Docs",'content':"10. Use Counts to Do Simple Arithmetic #  \u0026lt;C-a\u0026gt; and \u0026lt;C-x\u0026gt; can use to do computation. \u0026lt;C-a can add one to a number, and \u0026lt;C-x\u0026gt; can minus one.You can press a number before use these computation, which will change the number you want to use in the computation.\n"});index.add({'id':10,'href':'/docs/tip11/','title':"11. Don’t Count If You Can Repeat",'section':"Docs",'content':"11. Don’t Count If You Can Repeat #  The author think repeat is better than count,because you can undo every . operation, but you can\u0026rsquo;t undo count operation which will undo all the change.\n"});index.add({'id':11,'href':'/docs/tip12/','title':"12. Combine and Conquer",'section':"Docs",'content':"12. Combine and Conquer #   Operator + Motion = Action\n Many actions consist of operator and motion, you can also define your own operator and motion.Self-defined command can be used with the vim default command.Scan the motion.txt first(run :h motion in command mode) before you are going to write your own command, you can find many useful command in there.\n"});index.add({'id':12,'href':'/docs/tip13/','title':"13. Make Corrections Instantly from Insert Mode",'section':"Docs",'content':"13. Make Corrections Instantly from Insert Mode #  In the insert mode, you can use Backspace to delete the wrong words when you in the INSERT MODE.\nThere are some other way let you to delete a char or word in the INSERT MODE.\n   Keystrokes Effect     \u0026lt;C-h\u0026gt; Delete back one character (backspace)   \u0026lt;C-w\u0026gt; Delete back one word   \u0026lt;C-u\u0026gt; Delete back to start of line    "});index.add({'id':13,'href':'/docs/tip14/','title':"14. Get Back to Normal Mode",'section':"Docs",'content':"14. Get Back to Normal Mode #  Three ways back to NORMAL MODE\n   Keystrokes Effect     \u0026lt;Esc\u0026gt; swap to NORMAL MODE   \u0026lt;C-[\u0026gt; swap to NORMAL MODE   \u0026lt;C-o\u0026gt; swap to INSERT-NORMAL MODE    "});index.add({'id':14,'href':'/docs/tip15/','title':"15. Paste from a Register Without Leaving Insert Mode",'section':"Docs",'content':"15. Paste from a Register Without Leaving Insert Mode #  First, use y copy some words into the copy register, then change the mode from NORMAL to INSERT mode, now you can use \u0026lt;C-r\u0026gt;0 to paste the words in the copy register to the file, the command \u0026lt;C-r\u0026gt;0 may cause line break, you can use \u0026lt;C-r\u0026gt;\u0026lt;C-p\u0026gt;{register}.\n"});index.add({'id':15,'href':'/docs/tip16/','title':"16.Do Back-of-the-Envelope Calculations in Place",'section':"Docs",'content':"16.Do Back-of-the-Envelope Calculations in Place #  INSERT MODE run the below command \u0026lt;C-r\u0026gt;=1*3\u0026lt;Enter\u0026gt;\n"});index.add({'id':16,'href':'/docs/tip17/','title':"17. Insert Unusual Characters by Character Code",'section':"Docs",'content':"17. Insert Unusual Characters by Character Code #     Keystrokes Effect     \u0026lt;C-v\u0026gt;{123} Insert character by decimal code   \u0026lt;C-v\u0026gt;u{1234} Insert character by hexadecimal code   \u0026lt;C-v\u0026gt;{nondigit} Insert nondigit literally   \u0026lt;C-k\u0026gt;{char1}{char2} Insert character represented by {char1}{char2} digraph    "});index.add({'id':17,'href':'/docs/tip18/','title':"18. Insert Unusual Characters by Digraph",'section':"Docs",'content':"18. Insert Unusual Characters by Digraph #  run :digraphs and :h digraph-table\n"});index.add({'id':18,'href':'/docs/tip19/','title':"19. Overwrite Existing Text with Replace Mode",'section':"Docs",'content':"19. Overwrite Existing Text with Replace Mode #  Press R can let you go to REPLACE MODE;Press r can make you replace one char and go back to NORMAL MODE.\nSorry, now I don\u0026rsquo;t know how to use gR and gr, you can check the book by yourself.\n"});index.add({'id':19,'href':'/docs/tip20/','title':"20. Grok Visual Mode",'section':"Docs",'content':"20. Grok Visual Mode #  In VISUAL MODE,you can use viw and c to change a word.\n\u0026lt;C-g\u0026gt; will let you switch between VISUAL MODE and SELECT MODE\n"});index.add({'id':20,'href':'/docs/tip21/','title':"21. Define a Visual Selection",'section':"Docs",'content':"21. Define a Visual Selection #  There are three modes for VISUAL MODE\n v enable character-wise Visual mode\n  V enable line-wise Visual mode\n  \u0026lt;C-v\u0026gt; enable block-wise Visual mode\n Two very helpful commands\n gv reselect the last visual selection\n  o go to other end of highlighted text\n "});index.add({'id':21,'href':'/docs/tip22/','title':"22. Repeat Line-Wise Visual Commands",'section':"Docs",'content':"22. Repeat Line-Wise Visual Commands #  You can also repeat the VISUAL command with the ..\n"});index.add({'id':22,'href':'/docs/tip23/','title':"23. Prefer Operators to Visual Commands Where Possible",'section':"Docs",'content':"23. Prefer Operators to Visual Commands Where Possible #  Because the visual command will appear some magic thing.Like the book said that vitU can just repeat the same length chars in VISUAL command, but the gUit can repeat the whole word in NORMAL command.\n"});index.add({'id':23,'href':'/docs/tip24/','title':"24. Edit Tabular Data with Visual-Block Mode",'section':"Docs",'content':"24. Edit Tabular Data with Visual-Block Mode #  When you use VISUAL-BLOCK MODE, you can change the text by column.Try use \u0026lt;C-v\u0026gt; to select several columns, then run r|, you can see the | on the selected columns.\n"});index.add({'id':24,'href':'/docs/tip25/','title':"25. Change Columns of Text",'section':"Docs",'content':"25. Change Columns of Text #  When you use \u0026lt;C-v\u0026gt; select several places, then use c and some words you want, finally input \u0026lt;Esc\u0026gt;, all selected places will be changed.\n"});index.add({'id':25,'href':'/docs/tip26/','title':"26. Append After a Ragged Visual Block",'section':"Docs",'content':"26. Append After a Ragged Visual Block #  If you want to add something on some ragged lines.You can use \u0026lt;C-v\u0026gt; to select the line you want to add, then input $A, now you can input whatever you want.\n"});index.add({'id':26,'href':'/docs/tip27/','title':"27.Meet Vim’s Command Line",'section':"Docs",'content':"27.Meet Vim’s Command Line #  You can change to COMMAND MODE by :\n   Command Effect     :[range]delete [x] Delete specified lines [into register x]   :[range]yank [x] Yank specified lines [into register x]   :[line]put [x] Put the text from register x after the specified line   :[range]copy {address} Copy the specified lines to below the line specified by {address}   :[range]move {address} Move the specified lines to below the line specified by {address}   :[range]join Join the specified lines   :[range]normal {commands} Execute Normal mode {commands} on each speci- fied line   :[range]substitute/{pat- tern}/{string}/[flags] Replace occurrences of {pattern} with {string} on each specified line   :[range]global/{pattern}/[cmd] Execute the Ex command [cmd] on all specified lines where the {pattern} matches    "});index.add({'id':27,'href':'/docs/tip28/','title':"28. Execute a Command on One or More Consecutive Lines",'section':"Docs",'content':"28. Execute a Command on One or More Consecutive Lines #  You can specify the lines by giving a [range] before the command.The range can be a line number, a mark, or a pattern.\n:2,5p Print the 2~5 lines\n:'\u0026lt;,'\u0026gt;p Use VISUAL MODE to select some lines, then press :, you will see '\u0026lt;,'\u0026gt; in the command line, and press p will print all the selected lines\n:/\u0026lt;html\u0026gt;/,/\u0026lt;\\/html\u0026gt;/p It will print all the words between \u0026lt;html\u0026gt; and \u0026lt;/html\u0026gt;.\n:/\u0026lt;html\u0026gt;/+1,/\u0026lt;\\/html\u0026gt;/-1p The number delegates how to calculate the lines that will be displayed.\nSome specail symbols that can be used in the range\n   Symbol Address     1 First line of the file   $ Last line of the file   0 Virtual line above first line of the file   . Line where the cursor is placed   \u0026rsquo;m Line containing mark m   \u0026lsquo;\u0026lt; Start of visual selection   \u0026lsquo;\u0026gt; End of visual selection   % The entire file (shorthand for :1,$)    "});index.add({'id':28,'href':'/docs/tip29/','title':"29. Duplicate or Move Lines Using ‘:t’ and ‘:m’ Commands",'section':"Docs",'content':"29. Duplicate or Move Lines Using ‘:t’ and ‘:m’ Commands #   :[range]copy {address}\n You can copy command to copy lines\n   Command Effect     :6t. Copy line 6 to just below the current line   :t6 Copy the current line to just below line 6   :t. Duplicate the current line (similar to Normal mode yyp)   :t$ Copy the current line to the end of the file   :\u0026lsquo;\u0026lt;,\u0026lsquo;\u0026gt;t0 Copy the visually selected lines to the start of the file     :[range]move {address}\n move or m can move the lines in the files, like the copy\n"});index.add({'id':29,'href':'/docs/tip30/','title':"30. Run Normal Mode Commands Across a Range",'section':"Docs",'content':"30. Run Normal Mode Commands Across a Range #  normal command can make you can let you run NORMAL MODE command across a range.\n:'\u0026lt;,'\u0026gt;normal . Like above command, you can repeat last modification on selected area.\n"});index.add({'id':30,'href':'/docs/tip31/','title':"31. Repeat the Last Ex Command",'section':"Docs",'content':"31. Repeat the Last Ex Command #  @: can repeat last command in the COMMAND MODE, like . which can repeat the last change in the NORMAL MODE.\n"});index.add({'id':31,'href':'/docs/tip32/','title':"32. Tab-Complete Your Ex Commands",'section':"Docs",'content':"32. Tab-Complete Your Ex Commands #  You can use \u0026lt;Tab\u0026gt; to complete your Ex command.(I don\u0026rsquo;t think that this is a tip, lol).\n"});index.add({'id':32,'href':'/docs/tip33/','title':"33. Insert the Current Word at the Command Prompt",'section':"Docs",'content':"33. Insert the Current Word at the Command Prompt #  \u0026lt;C-r\u0026gt;\u0026lt;C-w\u0026gt; Can do this job.\n"});index.add({'id':33,'href':'/docs/tip34/','title':"34. Recall Commands from History",'section':"Docs",'content':"34. Recall Commands from History #  \u0026lt;Up\u0026gt; and \u0026lt;Down\u0026gt; can use to recall commands, also \u0026lt;C-p\u0026gt; and \u0026lt;C-n\u0026gt;\n"});index.add({'id':34,'href':'/docs/tip35/','title':"35. Run Commands in the Shell",'section':"Docs",'content':"35. Run Commands in the Shell #  If you want to run shell command in the Vim, you can add one ! before the command which one you want to run in vim COMMAND MODE.\n\u0026lt;Ctrl-z\u0026gt; can suspend the vim process, fg can make it run in the frontground again.\n:shell,This one can start a shell.\n"});index.add({'id':35,'href':'/docs/tip36/','title':"36. Track Open Files with the Buffer List",'section':"Docs",'content':"36. Track Open Files with the Buffer List #  ls can show you the buffer list.\n:bprevious, :bnext, :bfirst, :blast can navgate the buffer list.\n:bdelete can delete the file in the buffer list.\n"});index.add({'id':36,'href':'/docs/tip37/','title':"37. Group Buffers into a Collection with the Argument List",'section':"Docs",'content':"37. Group Buffers into a Collection with the Argument List #  args {arglist} can use to fill the argument list, then you can use argdo to execute command for every file in the list.\nfor {arglist}, you can use glob mode(like **/*.js) or command(should be inside the backtick characters).\n"});index.add({'id':37,'href':'/docs/tip38/','title':"38. Manage Hidden Files",'section':"Docs",'content':"38. Manage Hidden Files #     Command Effect     :w[rite] Write the contents of the buffer to disk   :e[dit]! Read the file from disk back into the buffer (that is, revert changes)   :qa[ll]! Close all windows, discarding changes without warning   :wa[ll] Write all modified buffers to disk    "});index.add({'id':38,'href':'/docs/tip39/','title':"39. Divide Your Workspace into Split Windows",'section':"Docs",'content':"39. Divide Your Workspace into Split Windows #     Command Effect     \u0026lt;C-w\u0026gt;s Split the current window horizontally, reusing the current buffer in the new window   \u0026lt;C-w\u0026gt;v Split the current window vertically, reusing the current buffer in the new window   :sp[lit] {file} Split the current window horizontally, loading {file} into the new window   :vsp[lit] {file} Split the current window vertically, loading {file} into the new window   \u0026lt;C-w\u0026gt;w Cycle between open windows   \u0026lt;C-w\u0026gt;h Focus the window to the left   \u0026lt;C-w\u0026gt;j Focus the window below   \u0026lt;C-w\u0026gt;k Focus the window above   \u0026lt;C-w\u0026gt;l Focus the window to the right   \u0026lt;C-w\u0026gt;= Equalize width and height of all windows   \u0026lt;C-w\u0026gt;_ Maximize height of the active window   \u0026lt;C-w\u0026gt;| Maximize width of the active window   [N]\u0026lt;C-w\u0026gt;_ Set active window height to [N] rows   [N]\u0026lt;C-w\u0026gt;| Set active window width to [N] columns       Ex Command Normal Command Effect     :cl[ose] \u0026lt;C-w\u0026gt;c Close the active window   :on[ly] \u0026lt;C-w\u0026gt;o Keep only the active window, closing all others    "});index.add({'id':39,'href':'/docs/tip40/','title':"40.Organize Your Window Layouts with Tab Pages",'section':"Docs",'content':"40.Organize Your Window Layouts with Tab Pages #     Command Effect     :tabe[dit] {filename} Open {filename} in a new tab   \u0026lt;C-w\u0026gt;T Move the current window into its own tab   :tabc[lose] Close the current tab page and all of its windows   :tabo[nly] Keep the active tab page, closing all others       Ex Command Normal Command Effect     :tabn[ext] {N} {N}gt Switch to tab page number {N}   :tabn[ext] gt Switch to the next tab page   :tabp[revious] gT Switch to the previous tab page    "});index.add({'id':40,'href':'/docs/tip41/','title':"41. Open a File by Its Filepath Using ‘:edit’",'section':"Docs",'content':"41. Open a File by Its Filepath Using ‘:edit’ #  :edit {file} This command can help you to open file.The file can be absolute path or relative path.\n"});index.add({'id':41,'href':'/docs/tip42/','title':"42. Open a File by Its Filename Using ‘:find’",'section':"Docs",'content':"42. Open a File by Its Filename Using ‘:find’ #  :find command can let us open a file by file name, but you don\u0026rsquo;t need to input full path of the file.Ha, wait, you need to set the path selection first. when you set path like path=/code/files/mvc, now you can find the file by :find {filename}.You also can set many path, use path+={path}\n"});index.add({'id':42,'href':'/docs/tip43/','title':"43. Explore the File System with netrw",'section':"Docs",'content':"43. Explore the File System with netrw #  netrw can help you manage your file system,but you need to set set nocompatible and filetype plugin on in you .vimrc file.\n:Explore or :E can open the current directory,the netrw also provide :Sexplore and :Vexplore to open the file in a other window.\nIn the netrw mode, you can use % create a new file, d create a new directory, R rename the file/directory under the cursor and D delete the file/directory under the cursor.\n"});index.add({'id':43,'href':'/docs/tip44/','title':"44. Save Files to Nonexistent Directories",'section':"Docs",'content':"44. Save Files to Nonexistent Directories #  For example, you open a file by :e madeup/test.md, but the madeup directory doesn\u0026rsquo;t exists, you will get error like Can't open file for writing, because you don\u0026rsquo;t have the madeup.What should i do?Fortunately, you can run :!mkdir -p %:h first to create the directory, then :w can works well.\n"});index.add({'id':44,'href':'/docs/tip45/','title':"45. Save a File as the Super User",'section':"Docs",'content':"45. Save a File as the Super User #  :w !sudo tee % \u0026gt; /dev/null This comand can make you change the readonly file.\n"});index.add({'id':45,'href':'/docs/tip46/','title':"46. Keep Your Fingers on the Home Row",'section':"Docs",'content':"46. Keep Your Fingers on the Home Row #  Use h, j, k, l to move the cursor,which will make you move faster than the arrow key.\n"});index.add({'id':46,'href':'/docs/tip47/','title':"47. Distinguish Between Real Lines and Display Lines",'section':"Docs",'content':"47. Distinguish Between Real Lines and Display Lines #  When the line is too long,vim will use two or more lines to display it, whick is display lines. Its different from the real lines.\nThe command j can move to the next real line, gj can move to the next display line. All commands related to real line can add g in the front of the command and make it act on display line.\n"});index.add({'id':47,'href':'/docs/tip48/','title':"48. Move Word-Wise",'section':"Docs",'content':"48. Move Word-Wise #  move between word #     Command Move Cursor     w Forward to start of next word   b Backward to start of current/previous word   e Forward to end of current/next word   ge Backward to end of previous word    move between WORD #  W,B,E,gE related to the word motion.\nword definition\n A word consists of a sequence of letters, digits, and underscores, or as a sequence of other nonblank characters separated with whitespace\n WORD definition\n A WORD consists of a sequence of nonblank characters separated with whitespace\n "});index.add({'id':48,'href':'/docs/tip49/','title':"49. Find by Character",'section':"Docs",'content':"49. Find by Character #  Search in the current line.\n   Command Effect     f{char} Forward to the next occurrence of {char}   F{char} Backward to the previous occurrence of {char}   t{char} Forward to the character before the next occurrence of {char}   T{char} Backward to the character after the previous occurrence of {char}   ; Repeat the last character-search command   , Reverse the last character-search command    "});index.add({'id':49,'href':'/docs/tip50/','title':"50. Search to Navigate",'section':"Docs",'content':"50. Search to Navigate #  Vim can let move through the search.\n/takes\u0026lt;CR\u0026gt; This command will move your cursor to the takes text if it exists in the current file.After that you can use n to repeat the search and N to reverse the search.\n"});index.add({'id':50,'href':'/docs/tip51/','title':"51. Trace Your Selection with Precision Text Objects",'section':"Docs",'content':"51. Trace Your Selection with Precision Text Objects #     Text Object Selection     a) or ab A pair of (parentheses)   i) or ib Inside of (parentheses)   a} or aB A pair of {braces}   i} or iB Inside of {braces}   a] A pair of [brackets]   i] Inside of [brackets]   a\u0026gt; 　A pair of \u0026lt;angle brackets\u0026gt;   i\u0026gt; Inside of \u0026lt;angle brackets\u0026gt;   a’ A pair of \u0026lsquo;single quotes\u0026rsquo;   i’ Inside of \u0026lsquo;single quotes\u0026rsquo;   a\u0026quot; A pair of \u0026ldquo;double quotes\u0026rdquo;   i\u0026quot; Inside of \u0026ldquo;double quotes\u0026rdquo;   a A pair of backticks   i Inside of backticks   at A pair of \u0026lt;xml\u0026gt;tags\u0026lt;/xml\u0026gt;   it Inside of \u0026lt;xml\u0026gt;tags\u0026lt;/xml\u0026gt;    "});index.add({'id':51,'href':'/docs/tip52/','title':"52. Delete Around, or Change Inside",'section':"Docs",'content':"52. Delete Around, or Change Inside #     Keystrokes Buffer Contents     w Current word   aw Current word plus one space   iW Current WORD   aW Current WORD plus one space   is Current sentence   as Current sentence plus one space   ip Current paragraph   ap Current paragraph plus one blank line    d{motion} work well with aw, as and ap\nc{motion} work well with iw, is and ip\n"});index.add({'id':52,'href':'/docs/tip53/','title':"53. Mark Your Place and Snap Back to It",'section':"Docs",'content':"53. Mark Your Place and Snap Back to It #   m{a-zA-Z}\n m and another char can use to mark the current cursor position,then you can ``{mark}` go back to that line wherever you are.\nvim also provide some automatic mark.\n   Keystrokes Buffer Contents     `` | Position before the last jump within current file |    `. | Location of last change|    `^ | Location of last insertion|    `[ | Start of last change or yank|    `] | End of last change or yank|    `\u0026lt; | Start of last visual selection|    `\u0026gt; | End of last visual selection|     I think that i won\u0026rsquo;t use them at any time, hahaha, it\u0026rsquo;s too difficult to remember them.\n"});index.add({'id':53,'href':'/docs/tip54/','title':"54. Jump Between Matching Parentheses",'section':"Docs",'content':"54. Jump Between Matching Parentheses #   The % command lets us jump between opening and closing sets of parentheses (see :h % ). It works with () , {} , and [].\n "});index.add({'id':54,'href':'/docs/tip55/','title':"55. Traverse the Jump List",'section':"Docs",'content':"55. Traverse the Jump List #  \u0026lt;C-o\u0026gt; can go back to last jump, \u0026lt;C-i\u0026gt; can forward to the next jump. They like the back button and forward button when you use browser.\n"});index.add({'id':55,'href':'/docs/tip56/','title':"56. Traverse the Change List",'section':"Docs",'content':"56. Traverse the Change List #  :changes can use to see the change list of the current file.And you can use g; and g, to move between these change list.\n"});index.add({'id':56,'href':'/docs/tip57/','title':"57. Jump to the Filename Under the Cursor",'section':"Docs",'content':"57. Jump to the Filename Under the Cursor #  gf can let you do things like the title said. Sometimes you need to set the file extension, use :set suffixesadd+=.{file extension},you also can use set path to decide which path you want the gf command to search.\n"});index.add({'id':57,'href':'/docs/tip58/','title':"58. Snap Between Files Using Global Marks",'section':"Docs",'content':"58. Snap Between Files Using Global Marks #  m{Upper char} command set a global,when you scan in another file,suddenly you want to go back to the marked file, you just need to call \\{Upper char}`.\n"});index.add({'id':58,'href':'/docs/tip59/','title':"59. Delete, Yank, and Put with Vim’s Unnamed Register",'section':"Docs",'content':"59. Delete, Yank, and Put with Vim’s Unnamed Register #  xp can transpose the next two characters.\nddp transpose the order of this line and its successor.\nyyp copy and paste the currnt line after the current line.\nAll your operation will be saved to unnamed register if you don\u0026rsquo;t specify the register.\n"});index.add({'id':59,'href':'/docs/tip60/','title':"60. Grok Vim’s Registers",'section':"Docs",'content':"60. Grok Vim’s Registers #  \u0026quot;{register} can specify which register you want to use.\n\u0026quot;\u0026quot; is unnamed register.\n\u0026quot;0 is copy register for y{motion}.\n\u0026quot;a – \u0026quot;z is named register.\n\u0026quot;_ is black hole register,which won\u0026rsquo;t save operation.\n\u0026quot;+ can get the content from system clipboard.\n\u0026quot;* can put things into the system clipboard.\n\u0026quot;= register can use to do some computation.\n   Register Contents     \u0026quot;% Name of the current file   \u0026quot;# Name of the alternate file   \u0026quot;. Last inserted text   \u0026quot;: Last Ex command   \u0026quot;/ Last search pattern    "});index.add({'id':60,'href':'/docs/tip61/','title':"61. Replace a Visual Selection with a Register",'section':"Docs",'content':"61. Replace a Visual Selection with a Register #  In the VISUAL MODE,you can selection some words, then use p to replace them with the content in the copy register.\n"});index.add({'id':61,'href':'/docs/tip62/','title':"62. Paste from a Register",'section':"Docs",'content':"62. Paste from a Register #  If register is Character-wise Regions,command p paste the text after the cursor, P paste it before the cursor.\nIf register is Line-Wise Regions, the content will be add to the last row or next row.\nIn INSERT MODE,we also can use \u0026lt;C-r\u0026gt;{register} to add the Character-wise Regions.\n"});index.add({'id':62,'href':'/docs/tip63/','title':"63. Interact with the System Clipboard",'section':"Docs",'content':"63. Interact with the System Clipboard #  When you copy content from system clipboard to vim, you should set :set paster before you do it,which will keep the original, including the tabs or spaces.Or use \u0026quot;+p to do the copy.\n"});index.add({'id':63,'href':'/docs/tip64/','title':"64. Record and Execute a Macro",'section':"Docs",'content':"64. Record and Execute a Macro #  q{register} begin to record macro, after you do some operation, you can call q to stop record.Next time you can use @{register} to repeat the macro content,@@ repeat the last operating macro.\n"});index.add({'id':64,'href':'/docs/tip65/','title':"65. Normalize, Strike, Abort",'section':"Docs",'content':"65. Normalize, Strike, Abort #  You should make sure that every command in the macro can be repeated.\n"});index.add({'id':65,'href':'/docs/tip66/','title':"66. play back with a count",'section':"Docs",'content':"66. play back with a count #  You can use command like {number}@{register} to repeat act the macro {number} times.\n"});index.add({'id':66,'href':'/docs/tip67/','title':"67. Repeat a Change on Contiguous Lines",'section':"Docs",'content':"67. Repeat a Change on Contiguous Lines #  There are two methods to do this stuff.\n1.Execute macro in series by {number}@{register}.\n2.Execute macro in parallel by :'\u0026lt;,'\u0026gt;normal @{register}.\n"});index.add({'id':67,'href':'/docs/tip68/','title':"68. Append Commands to a Macro",'section':"Docs",'content':"68. Append Commands to a Macro #  :reg {register} can check what content in the register.\nSometimes you forget a command when record a macro,you can record it again by the Upper char.For example, qa{command}q record the macro in a,then you can use qA{new command}a to append commmands to the a macro.\n"});index.add({'id':68,'href':'/docs/tip69/','title':"69. Act Upon a Collection of Files",'section':"Docs",'content':"69. Act Upon a Collection of Files #  args {files' name} can open a arguments list and argdo normal @{macro char} can execute the macro in all files in the arguments list.Be careful!,before you run argdo normal @{macro char}, you should run :edit! first, which will exclude macro effect in the current file. You also can use the {number}@{register} to do this stuff,but in the macro,you should include :next at then end of macro.\n"});index.add({'id':69,'href':'/docs/tip70/','title':"70. Evaluate an Iterator to Number Items in a List",'section':"Docs",'content':"70. Evaluate an Iterator to Number Items in a List #  An example:\n:let i=1 qa I\u0026lt;C-r\u0026gt;=i\u0026lt;CR\u0026gt;)\u0026lt;Esc\u0026gt; :let i += 1 q After you record the macro,you can use VISUAL MODE to select all lines you want to act this and call it.\n"});index.add({'id':70,'href':'/docs/tip71/','title':"71. Edit the Contents of a Macro",'section':"Docs",'content':"71. Edit the Contents of a Macro #  If you want to edit the content in the register,you can use :put {register} to put the content into the vim,then edit it,finally 0\u0026quot;{register}y$dd can put it back to the register.\n"});index.add({'id':71,'href':'/docs/tip72/','title':"72. Tune the Case Sensitivity of Search Patterns",'section':"Docs",'content':"72. Tune the Case Sensitivity of Search Patterns #  \\c(case unsensitivity) and \\C(case sensitivity) can cover the default set.If you don\u0026rsquo;t like them, you can put these two lines in your.vimrc file, which are very sweat for search.\nset ignorecase set smartcase "});index.add({'id':72,'href':'/docs/tip73/','title':"73. Use the \\v Pattern Switch for Regex Searches",'section':"Docs",'content':"73. Use the \\v Pattern Switch for Regex Searches #  When you use regex search, you can put \\v before the pattern, so you don\u0026rsquo;t need to transfer the special char in the pattern,no backslash make it more readable, right?\nNo \\v\n/#\\([0-9a-fA-F]\\{6}\\|[0-9a-fA-F]\\{3}\\) Include\\v\n/\\v#([0-9a-fA-F]{6}|[0-9a-fA-F]{3}) "});index.add({'id':73,'href':'/docs/tip74/','title':"74. Use the \\V Literal Switch for Verbatim Searches",'section':"Docs",'content':"74. Use the \\V Literal Switch for Verbatim Searches #  Just like the title said,use \\V in your search pattern to make it search literally.\n"});index.add({'id':74,'href':'/docs/tip75/','title':"75. Use Parentheses to Capture Submatches",'section':"Docs",'content':"75. Use Parentheses to Capture Submatches #  An example:\n/\\v\u0026lt;(\\w+)\\_s+\\1\u0026gt; \\1 will reuse the rule in (\\w+).\n"});index.add({'id':75,'href':'/docs/tip76/','title':"76. Stake the Boundaries of a Word",'section':"Docs",'content':"76. Stake the Boundaries of a Word #  \u0026lt;{word}\u0026gt; will just match the {word}.\nFor example:\nthe problem with these new recruits is that This line /\u0026lt;the\u0026gt; just match the first word the,but /the will match the and these\n"});index.add({'id':76,'href':'/docs/tip77/','title':"77. Stake the Boundaries of a Match",'section':"Docs",'content':"77. Stake the Boundaries of a Match #  \\zs and \\ze can handle this stuff.These two command make just highlight the words you want.\\zs for start and \\ze for end.\nAn example:\nPractical Vim Command /Practical \\zsVim\u0026lt;CR\u0026gt; will highlight the Vim.\n"});index.add({'id':77,'href':'/docs/tip78/','title':"78. Escape Problem Characters",'section':"Docs",'content':"78. Escape Problem Characters #   Escape / Characters When Searching Forward\n  Escape ? Characters When Searching Backward\n  Escape \\ Characters Every Time\n You also can use funciton to do the escape:\nescape({string}, {chars}) \u0026ldquo;The {chars} argument specifies which characters must be escaped with a backslash.\u0026rdquo;\n"});index.add({'id':78,'href':'/docs/tip79/','title':"79. Meet the Search Command",'section':"Docs",'content':"79. Meet the Search Command #  /{search text} is search command\n   Command Effect     n Jump to next match, preserving direction and offset   N Jump to previous match, preserving direction and offset   / Jump forward to next match of same pattern   ? Jump backward to previous match of same pattern    "});index.add({'id':79,'href':'/docs/tip80/','title':"80. Highlight Search Matches",'section':"Docs",'content':"80. Highlight Search Matches #  set hlsearch You also can forbid it:\nset nohlsearch "});index.add({'id':80,'href':'/docs/tip81/','title':"81. Preview the First Match Before Execution",'section':"Docs",'content':"81. Preview the First Match Before Execution #  set incsearch Use this can achieve the target.\nWhen you search in vim,you can use \u0026lt;C-r\u0026gt;\u0026lt;C-w\u0026gt; to autocomplete the search word except you use \\v in the command,which will make the \u0026lt;C-r\u0026gt;\u0026lt;C-w\u0026gt; command operation looks weird.\n"});index.add({'id':81,'href':'/docs/tip82/','title':"82. Count the Matches for the Current Pattern",'section':"Docs",'content':"82. Count the Matches for the Current Pattern #  :%s///gn That\u0026rsquo;s it.\n"});index.add({'id':82,'href':'/docs/tip83/','title':"83. Offset the Cursor to the End of a Search Match",'section':"Docs",'content':"83. Offset the Cursor to the End of a Search Match #  /{search word}/e Happy with Vim\n"});index.add({'id':83,'href':'/docs/tip84/','title':"84. Operate on a Complete Search Match",'section':"Docs",'content':"84. Operate on a Complete Search Match #  An example:\n1.First, /\\vX(ht)?ml\\C match the words(there is Xml or Xhtml) you want.\n2.Second, {command}//e can use {command} to operate the matched words.\n"});index.add({'id':84,'href':'/docs/tip85/','title':"85. Create Complex Patterns by Iterating upon Search History",'section':"Docs",'content':"85. Create Complex Patterns by Iterating upon Search History #  q/ can summon the command-line window and you can edit command in that window,after you finish it,just press \u0026lt;CR\u0026gt; to operate it.\n"});index.add({'id':85,'href':'/docs/tip86/','title':"86. Search for the Current Visual Selection",'section':"Docs",'content':"86. Search for the Current Visual Selection #  Plugin 'https://github.com/nelstrom/vim-visual-star-search' Put this line in your .vimrc file,then run :PluginInstall,that\u0026rsquo;s it.\n"});index.add({'id':86,'href':'/docs/tip87/','title':"87. Meet the Substitute Command]",'section':"Docs",'content':"87. Meet the Substitute Command] #  :[range]s[ubstitute]/{pattern}/{string}/[flags]  The substitute command allows us to find and replace one chunk of text with another.\n Some flags show below:\n 1.The g flag makes the substitute command act globally.\n  2.The c flag gives us the opportunity to confirm or reject each change.\n  3.The n flag suppresses the usual substitute behavior.\n  4.The \u0026amp; flag simply tells Vim to reuse the same flags from the previous substitute command.\n Some special chars in the pattern\n   Symbol Represents     \\r Insert a carriage return   \\t Insert a tab character   \\\\ Insert a tab character   \\1 Insert the first submatch   \\2 Insert the second submatch (and so on, up to \\9)   \\0 Insert the entire matched pattern   \u0026amp; Insert the entire matched pattern   ~ Use {string} from the previous invocation of :substitute   ={Vim script} Evaluate {Vim script} expression; use result as replacement {string}    "});index.add({'id':87,'href':'/docs/tip88/','title':"88. Find and Replace Every Match in a File",'section':"Docs",'content':"88. Find and Replace Every Match in a File #  See the command again:\n :[range]s[ubstitute]/{pattern}/{string}/[flags]\n If you want your command run like the title said,you can add % in the [range] part and add g in the [flags] part.\n"});index.add({'id':88,'href':'/docs/tip89/','title':"89. Eyeball Each Substitution",'section':"Docs",'content':"89. Eyeball Each Substitution #  See the command.\n :[range]s[ubstitute]/{pattern}/{string}/[flags]\n You just need to add c in the [flags] part,then every time when you want to execute the replacement,you will get the info like this in the command part:\ny/n/a/q/l/^E/^Y    Trigger Effect     y Substitute this match   n Skip this match   q Quit substituting   l \u0026ldquo;last\u0026rdquo;—Substitute this match, then quit   a \u0026ldquo;all\u0026rdquo;-Substitute this and any remaining matches    Scroll the screen up    Scroll the screen down    "});index.add({'id':89,'href':'/docs/tip90/','title':"90. Reuse the Last Search Pattern",'section':"Docs",'content':"90. Reuse the Last Search Pattern #   :[range]s[ubstitute]/{pattern}/{string}/[flags]\n You can reuse last search pattern by empty the {pattern} part when you do a new substitue call.\nYou also can fill last used pattern by \u0026lt;C-r\u0026gt;/.\n"});index.add({'id':90,'href':'/docs/tip91/','title':"91. Replace with the Contents of a Register",'section':"Docs",'content':"91. Replace with the Contents of a Register #   :[range]s[ubstitute]/{pattern}/{string}/[flags]\n In {string} part,you can use \u0026lt;C-r\u0026gt;{register} or \\=@{regsiter} to fill it with the content of a register.\n"});index.add({'id':91,'href':'/docs/tip92/','title':"92. Repeat the Previous Substitute Command](tips/tip.md)",'section':"Docs",'content':"92. Repeat the Previous Substitute Command](tips/tip.md) #  Execute in whole file,you can use g\u0026amp; repeat the previous substitute command.\n :\u0026amp;\u0026amp; replay the substitution in current line.\n  :\u0026lsquo;\u0026lt;,\u0026lsquo;\u0026gt;\u0026amp;\u0026amp; acts on the visual selection.\n  :%\u0026amp;\u0026amp; acts on the entire file,like g\u0026amp;.\n "});index.add({'id':92,'href':'/docs/tip93/','title':"93. Rearrange CSV Fields Using Submatches",'section':"Docs",'content':"93. Rearrange CSV Fields Using Submatches #  ({pattern}) is a submatche,you can use \\{num} to index it.\n"});index.add({'id':93,'href':'/docs/tip94/','title':"94. Perform Arithmetic on the Replacement",'section':"Docs",'content':"94. Perform Arithmetic on the Replacement #  An example in the book,downgrade the number of h element:\n\u0026lt;h2\u0026gt;Heading number 1\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;Number 2 heading\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;Another heading\u0026lt;/h4\u0026gt; Command one:\n/\\v\\\u0026lt;\\/?h\\zs\\d This command will match the number in the h element.\n:%s//\\=submatch(0)-1/g This command,// match last used pattern,submatch(0) will get the value of match.\n"});index.add({'id':94,'href':'/docs/tip95/','title':"95. Swap Two or More Words",'section':"Docs",'content':"95. Swap Two or More Words #  Try vim-abolish\n"});index.add({'id':95,'href':'/docs/tip96/','title':"96. Find and Replace Across Multiple Files",'section':"Docs",'content':"96. Find and Replace Across Multiple Files #  We need a plugin for this.\nAn examle in the book,replace Pragmatic with Practical in all the project files:\n/Pragmatic\\ze Vim :vimgrep /\u0026lt;C-r\u0026gt;// **/*.txt :Qargs :argdo %s//Practical/g :argdo update vimgrep will put all the matched file into the quickfix list. Qargs will put all files in the quickfix list into the arguments list.\n"});index.add({'id':96,'href':'/docs/tip97/','title':"97. Meet the Global Command",'section':"Docs",'content':"97. Meet the Global Command #   :[range] global[!] /{pattern}/ [cmd]\n The global command will execute for the whole file if there is no [range].\n"});index.add({'id':97,'href':'/docs/tip98/','title':"98. Delete Lines Containing a Pattern",'section':"Docs",'content':"98. Delete Lines Containing a Pattern #  :g/{pattern}/d delete all the matched lines;:v/{pattern}/d keep all the matched lines.\n"});index.add({'id':98,'href':'/docs/tip99/','title':"99. Collect TODO Items in a Register",'section':"Docs",'content':"99. Collect TODO Items in a Register #  Two commands.\n qaq\n Eempty the register\n :g/TODO/yank A\n "});index.add({'id':99,'href':'/docs/tip100/','title':"100. Alphabetize the Properties of Each Rule in a CSS File",'section':"Docs",'content':"100. Alphabetize the Properties of Each Rule in a CSS File #  Understand the command:\n:g/{start}/ .,{finish} [cmd] "});index.add({'id':100,'href':'/docs/tip101/','title':"101. Meet ctags",'section':"Docs",'content':"101. Meet ctags #  Install Exuberant Ctags on your operating system,then use ctags {files} to generate the tags.\n"});index.add({'id':101,'href':'/docs/tip102/','title':"102. Configure Vim to Work with ctags",'section':"Docs",'content':"102. Configure Vim to Work with ctags #  Set the tags path to let vim know where is the tag file.Default tags path is current directory and projet root directory.\nGenerate the tags file:\n1.Generate it manually.\n:!ctags -R :nnoremap \u0026lt;f5\u0026gt; :!ctags -R\u0026lt;CR\u0026gt; 2.Generate it when save file.\n:autocmd BufWritePost * call system(\u0026quot;ctags -R\u0026quot;) 3.Work with version control system. Effortless Ctags with Git\n"});index.add({'id':102,'href':'/docs/tip103/','title':"103. Navigate Keyword Definitions with Vim’s Tag Navigation Commands",'section':"Docs",'content':"103. Navigate Keyword Definitions with Vim’s Tag Navigation Commands #  \u0026lt;C-]\u0026gt; can jump to a keyword definition.\n   Command Effect     \u0026lt;C-]\u0026gt; Jump to the first tag that matches the word under the cursor   g\u0026lt;C-]\u0026gt; Prompt user to select from multiple matches for the word under the cursor. If only one match exists, jump to it without prompting.   :tag {keyword} Jump to the first tag that matches {keyword}   :tjump {keyword} Prompt user to select from multiple matches for {keyword}. If only one match exists, jump to it without prompting.   :pop or  Reverse through tag history   :tag Advance through tag history   :tnext Jump to next matching tag   :tprev Jump to previous matching tag   :tfirst Jump to first matching tag   :tlast Jump to last matching tag   :tselect Prompt user to choose an item from the tag match list    "});index.add({'id':103,'href':'/docs/tip104/','title':"104. Compile Code Without Leaving Vim",'section':"Docs",'content':"104. Compile Code Without Leaving Vim #  Run :make in the vim command.\n"});index.add({'id':104,'href':'/docs/tip105/','title':"105. Browse the Quickfix List",'section':"Docs",'content':"105. Browse the Quickfix List #     Command Action     :cnext Jump to next item   :cprev Jump to previous item   :cfirst Jump to first item   :clast Jump to last item   :cnfile Jump to first item in next file   :cpfile Jump to last item in previous file   :cc N Jump to nth item   :copen Open the quickfix window   :cclose Close the quickfix window    "});index.add({'id':105,'href':'/docs/tip106/','title':"106. Recall Results from a Previous Quickfix List",'section':"Docs",'content':"106. Recall Results from a Previous Quickfix List #  Run :colder.\n"});index.add({'id':106,'href':'/docs/tip107/','title':"107. Customize the External Compiler",'section':"Docs",'content':"107. Customize the External Compiler #  You just need to know that vim can call whatever compiler you want him to do.\n"});index.add({'id':107,'href':'/docs/tip108/','title':"108. Call grep Without Leaving Vim",'section':"Docs",'content':"108. Call grep Without Leaving Vim #  You can run :grep in the vim command.\n"});index.add({'id':108,'href':'/docs/tip109/','title':"109. Customize the grep Program",'section':"Docs",'content':"109. Customize the grep Program #  Defaut grep config is:\ngrepprg=\u0026quot;grep -n $* /dev/null\u0026quot; grepformat=\u0026quot;%f:%l:%m,%f:%l%m,%f %l%m\u0026quot; You can modify them to customize the grep program.\n"});index.add({'id':109,'href':'/docs/tip111/','title':"111. Meet Vim’s Keyword Autocompletion",'section':"Docs",'content':"111. Meet Vim’s Keyword Autocompletion #     Command Type of Completion     \u0026lt;C-n\u0026gt; Generic keywords   \u0026lt;C-x\u0026gt;\u0026lt;C-n\u0026gt; Current buffer keywords   \u0026lt;C-x\u0026gt;\u0026lt;C-i\u0026gt; Included file keywords   \u0026lt;C-x\u0026gt;\u0026lt;C-]\u0026gt; tags file keywords   \u0026lt;C-x\u0026gt;\u0026lt;C-k\u0026gt; Dictionary lookup   \u0026lt;C-x\u0026gt;\u0026lt;C-l\u0026gt; Whole line completion   \u0026lt;C-x\u0026gt;\u0026lt;C-f\u0026gt; Filename completion   \u0026lt;C-x\u0026gt;\u0026lt;C-o\u0026gt; Omni-completion    "});index.add({'id':110,'href':'/docs/tip112/','title':"112. Work with the Autocomplete Pop-Up Menu",'section':"Docs",'content':"112. Work with the Autocomplete Pop-Up Menu #     Keystrokes Effect     \u0026lt;C-n\u0026gt; Use the next match from the word list (next match)   \u0026lt;C-p\u0026gt; Use the previous match from the word list (previous match)   \u0026lt;Down\u0026gt; Select the next match from the word list   \u0026lt;Up\u0026gt; Select the previous match from the word list   \u0026lt;C-y\u0026gt; Accept the currently selected match (yes)   \u0026lt;C-e\u0026gt; Revert to the originally typed text (exit from autocompletion)   \u0026lt;C-h\u0026gt; (and \u0026lt;BS\u0026gt;) Delete one character from current match   \u0026lt;C-l\u0026gt; Add one character from current match   {char} Stop completion and insert {char}    "});index.add({'id':111,'href':'/docs/tip113/','title':"113. Understand the Source of Keywords",'section':"Docs",'content':"113. Understand the Source of Keywords #  The keywords come from The Buffer List, The Buffer List and Tag Files.\n"});index.add({'id':112,'href':'/docs/tip114/','title':"114. Autocomplete Words from the Dictionary",'section':"Docs",'content':"114. Autocomplete Words from the Dictionary #  \u0026lt;C-x\u0026gt;\u0026lt;C-k\u0026gt; You need to supply Vim with a suitable word list.Easy way to do this is `:set spell``\n"});index.add({'id':113,'href':'/docs/tip115/','title':"115. Autocomplete Entire Lines",'section':"Docs",'content':"115. Autocomplete Entire Lines #  \u0026lt;C-x\u0026gt;\u0026lt;C-l\u0026gt; "});index.add({'id':114,'href':'/docs/tip116/','title':"116. Autocomplete Filenames",'section':"Docs",'content':"116. Autocomplete Filenames #  \u0026lt;C-x\u0026gt;\u0026lt;C-f\u0026gt; Notice: expansion related to the relative path.\n"});index.add({'id':115,'href':'/docs/tip117/','title':"117. Autocomplete with Context Awareness",'section':"Docs",'content':"117. Autocomplete with Context Awareness #  \u0026lt;C-x\u0026gt;\u0026lt;C-o\u0026gt; "});index.add({'id':116,'href':'/docs/tip118/','title':"118. Spell Check Your Work",'section':"Docs",'content':"118. Spell Check Your Work #  Run :set spell to enable the built-in spell checker.\n   Command Effect     ]s Jump to next spelling error   [s Jump to previous spelling error   z= Suggest corrections for current word   zg Add current word to spell file   zw Remove current word from spell file   zug Revert zg or zw command for current word    "});index.add({'id':117,'href':'/docs/tip119/','title':"119. Use Alternate Spelling Dictionaries",'section':"Docs",'content':"119. Use Alternate Spelling Dictionaries #  :set spell :set spelllang=en_us You can use :h spell-remarks to check all the lang that vim supported.\n"});index.add({'id':118,'href':'/docs/tip120/','title':"120. Add Words to the Spell File",'section':"Docs",'content':"120. Add Words to the Spell File #  Use spellfile option.\nAn example from book:\nsetlocal spelllang=en_us setlocal spellfile=~/.vim/spell/en.utf-8.add setlocal spellfile+=~/books/practical_vim/jargon.utf-8.add 2zg will add word to jargon file and 1zg will add it to default file.\n"});index.add({'id':119,'href':'/docs/tip121/','title':"121. Fix Spelling Errors from Insert Mode",'section':"Docs",'content':"121. Fix Spelling Errors from Insert Mode #  NORMAL MODE: z=\nINSERT MODE: \u0026lt;C-x\u0026gt;s\n"});})();